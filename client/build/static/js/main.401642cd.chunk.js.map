{"version":3,"sources":["logo.png","components/LaunchItem.tsx","components/MissionKey.tsx","components/Launches.tsx","components/Launch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","launch_site","className","classNames","format","site_name","to","MissionKey","LAUNCHES_QUERY","gql","Launches","Fragment","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.401642cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47a5ed68.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom'\n\ntype Props = {\n  launch: any\n}\n\nconst LaunchItem: React.FC<Props> = ({ launch: { flight_number, mission_name, launch_date_local, launch_success, launch_site } }) => {\n  //console.log(launch);\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4> Mission:\n            <span className={classNames({\n              'text-success': launch_success,\n              'text-danger': !launch_success\n            })}>\n              {mission_name}\n            </span>\n          </h4>\n          <p> Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment> </p>\n          <p> Launch Site: {launch_site.site_name} </p>\n        </div>\n        <div className=\"col-md-3\">\n            <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\"> Launch Details </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LaunchItem\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number,\n      mission_name,\n      launch_year,\n      launch_date_local,\n      launch_site {\n        site_name\n      }\n      launch_success\n    }\n  }\n`;\n\n\nexport default class Launches extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h1 className=\"display-4 my-3\"> Launches </h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {\n            ({ loading, error, data }: boolean | string | any) => {\n              if (loading) return <h4>Loading...</h4>\n              if (error) console.log(error);\n              console.log(data);\n\n              return (\n                <React.Fragment>\n                  {\n                    data.launches.map((launch: { flight_number: string | number | null | undefined; }) => (\n                      <LaunchItem key={launch.flight_number} launch={launch} />\n                    ))\n                  }\n                </React.Fragment>\n              )\n            }\n          }\n        </Query>\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router';\nimport classNames from 'classnames';\n\ntype Props = {\n  flight_number: any,\n  someString: any\n}\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number,\n      mission_name,\n      launch_year,\n      launch_success,\n      launch_failure_details {\n        time,\n        reason\n      }\n      launch_date_local,\n      rocket {\n        rocket_id,\n        rocket_name,\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport class Launch extends Component<Props & RouteComponentProps> {\n\n  render() {\n    \n    let { flight_number }: any = (this.props.match.params as any);\n    flight_number = parseInt(flight_number);\n    \n    return (\n      <React.Fragment>\n        <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n          {\n            ({ loading, error, data }: boolean | string | any) => {\n              if (loading) return <h4>Loading...</h4>\n              if (error) console.log(error);\n\n              const {\n                mission_name,\n                flight_number,\n                launch_year,\n                launch_success,\n                rocket: { rocket_id, rocket_name, rocket_type }\n              } = data.launch;  \n\n              return (\n                <div>\n                  <h1 className=\"display-4 my-3\">\n                    <span className=\"text-dark\">\n                      Mission: \n                    </span>\n                    {mission_name}\n                  </h1>\n                  <h4 className=\"mb-3\"> Launch Details </h4>\n                  <ul className=\"list-group\">\n                    <li className=\"list-group-item\">\n                      Flight Number: {flight_number}\n                    </li>\n                    <li className=\"list-group-item\">\n                      Launch Year: {launch_year}\n                    </li>\n                    <li className=\"list-group-item\">\n                      Launch Successful: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                      })}>{launch_success ? 'Yes' : 'No'}</span>\n                    </li>\n                    {/*<li className=\"list-group-item\">\n                      <b>Launch Failure Details:</b>\n                    </li>*/}\n                  </ul>\n                  <h4 className=\"h4 my-3\"> Rocket Details </h4>\n                  <ul className=\"list-group\">\n                    <li className=\"list-group-item\"> Rocket ID: {rocket_id} </li>\n                    <li className=\"list-group-item\"> Rocket Name: {rocket_name} </li>\n                    <li className=\"list-group-item\"> Rocket Type: {rocket_type} </li>\n                  </ul>\n                  <hr />\n                  <Link className=\"btn btn-secondary\" to=\"/\">Back</Link>\n                </div>\n              )\n            }\n          }\n        </Query>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Launch\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport logo from './logo.png';\nimport './App.css';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\"\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt=\"spaceX\"\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}